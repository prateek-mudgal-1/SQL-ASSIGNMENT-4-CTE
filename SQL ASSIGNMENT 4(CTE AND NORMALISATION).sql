use mavenmovies;
-- question 1) Identify a table in the Sakila database that violates 1NF Explain how you would normalize it to achieve 1NF.alter
-- solution 1 THE ACTOR_AWARD TABLE IN THE SAKILA DATABASE VIOLATES 1NF AS IT CONTAINS MANY ACTOR_IDS THAT HAVE MORE THAN 1 AWARD. TO ACHIEVE 1NF
-- WE SHOULD RESTRUCTURE IT AND BRING IT IN A FORM WHERE SINGLE ROW HAVE ONLY SINGLE ENTRY.

-- question 2) Choose a table in Sakila and describe how you would determine whether it is in 2NF If it violates 2NF, 
-- explain the steps to normalize it.
-- solution 2) AGAIN THE ACTOR_AWARD TABLE VIOLATES 2NF BECAUSE IT VIOLATES 1NF MOREOVER IT UNNECESSARILY CONTAINS ACTORS'S FIRST AND LAST NAMES
-- THAT RESULTS MORE CONSUMPTION OF MEMORY. TO SIMPLIFY IT FIRST WE SHOULD CONVERT IT INTO 1NF AFTER THAT WE SHOULD REMOVE FIRST NAMES AND LAST 
-- NAMES FIELD BECAUSE IT IS ALREADY PRESENT IN ACTOR TABLE.

-- question 3) Identify a table in Sakila that violates 3NF Describe the transitive dependencies present and outline the 
-- steps to normalize the table to 3NF.
-- solution 3) THE PAYMENT TABLE IS NOT IN 3NF FORM BECAUSE IN THIS TABLE THE AMOUNT COLUMN DEPENDS ON RENTAL_ID WHICH 
-- DEPENDS ON CUSTOMER_ID WHICH IS THE COLUMN OF OTHER TABLE THAT MEANS IT IS DEPENDENT ON OTHER TABLE AND HENCE VIOLATES 3NF. TO NORMALIZE
-- THE TABLE THE AMOUNT COLUMN SHOULD BE REMOVED FROM PAYMENT TABLE AND A SEPARATE TABLE SHOULD BE MADE FOR IT.

-- question 4) Take a specific table in Sakila and guide through the process of normalizing it from the initial 
-- unormalized form up to at least 2NF
-- solution 4) LETS CONSIDER FILM TABLE FOR GETTING IT INTO 1NF FORM WE SHOULD MAKE SEPARATE ENTRIES FOR SPECIAL_FEATURE COLUMN BECAUSE A 
-- CONTAINS MULTIPLE FEATURES FOR GETTING IT IN 2NF WE SHOULD REMOVE RENTAL DURATION AND RENTAL RATE FROM THIS TABLE. 

-- question 5)  Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have 
-- acted in from the actor and film_actor tables.
-- solution 5)
WITH ActorFilmCount AS (
SELECT a.actor_id,CONCAT(a.first_name, ' ', a.last_name) AS actor_name,COUNT(fa.film_id) AS film_count FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id, actor_name)
SELECT actor_name,film_count FROM ActorFilmCount ORDER BY actor_name;

-- question 6) Use a recursive CTE to generate a hierarchical list of categories and their subcategories from the category
-- table in Sakilaa
-- question 6) sorry but i didn't find any subcategories column in category table.

-- question 7)Create a CTE that combines information from the film and language tables to display the film title, language name, and 
-- rental rate
-- solution 7)
with language_film as(
select film.title,language.name,film.rental_rate from film join language on film.language_id=language.language_id)
select * from language_film;

-- question 8)Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from 
-- the customer and payment tables
-- solution 8) 
with revenue_generated as (
select concat(first_name," ",last_name) ,sum(payment.amount) from customer join payment on customer.customer_id=payment.customer_id
group by customer.customer_id,customer.first_name,customer.last_name)
select * from revenue_generated;

-- question 9)Utilize a CTE with a window function to rank films based on their rental duration from the table
-- solution 9)
with rank_duration as (
select title,dense_rank() over(order by rental_duration) as film_rank from film)
select * from rank_duration; 

-- question 10)Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer
-- table to retrieve additional customer details.
-- solution 10)
 with rental_customer as (
select customer_id ,count(rental_id) as count from rental group by rental.customer_id having count>2)
 select concat(first_name," ",last_name),address_id,rental_customer.count from customer
 join rental_customer on rental_customer.customer_id=customer.customer_id;
 
 -- question 11)Write a query using a CTE to find the total number of rentals made each month, considering the 
-- rental_date from the rental table.
-- solution 11)
with rental_number as(
select monthname(rental.rental_date) as month, count(rental_id) from rental group by month)
select * from  rental_number;

-- question  12)Use a CTE to pivot the data from payment the table to display the total payments made by each customer in
-- separate columns for different payment methods.
-- solution 12)
with revenue_generated as (
select concat(first_name," ",last_name) ,sum(payment.amount) from customer join payment on customer.customer_id=payment.customer_id
group by customer.customer_id,customer.first_name,customer.last_name)
select * from revenue_generated;
-- there is no mention of different payment methods in payment table.

-- question 13)Create a CTE to generate a report showing pairs of actors who have appeared in the same film together, 
-- using the film_actor table.
-- solution 13)
with ActorPairs as (
select fa1.actor_id as actor1_id,fa2.actor_id as actor2_id,fa1.film_id from film_actor fa1
join film_actor fa2 on fa1.film_id = fa2.film_id where fa1.actor_id < fa2.actor_id)
select ap.actor1_id,ap.actor2_id,count(ap.film_id) as films_together from ActorPairs ap
group by ap.actor1_id,ap.actor2_id order by films_together desc;

-- question 14) Implement a recursive CTE to find all employees in the staff table who report to a specific manager, 
-- considering the reports_to column.
-- solution 14)
with report_to as(
select staff_id,manager_staff_id from staff staff join store on staff.store_id=store.store_id)
select * from report_to;


